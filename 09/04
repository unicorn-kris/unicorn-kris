
class SimpleVector {
private:
	int  size;
	int* array;
public:
	SimpleVector() {
			array[0] = 0;
			size = 0;
	}
	SimpleVector(int n) {
		array = new int[n];
		size = n;
	}
	~SimpleVector() {
		delete[] array;
	}
	int ssize() {
		return size;
	}
	void push_back (int x) {
			size = ssize() + 1;
		array[ssize()] = x;
	}
	int find(int x) {
		for (int i = 1; i <= ssize(); ++i)
			if (array[i] == x)
				return i;
			else
				return -1;
	}
	int operator [](int x) {
		return array[x];
	}
	void remove() {
		for (int i = 1; i < ssize(); ++i)
			array[i] = array[i + 1];
		size = ssize() - 1;
	}
	bool insert_after(int x, int y) {
		if (find(y) != -1) {
			return true;
			size = ssize() + 1;
			array[size] = 0;
			for (int j = size; j > find(y); --j)
				array[j] = array[j - 1];
		}
		else 
			return false;

	}
};


template <typename T>
class List
{

	struct Item
	{
		T inf;
		Item* next;
		Item(T x, Item* ref = nullptr) : inf(x), next(ref) {}
	} *first = nullptr, * last = nullptr;

public:
	void add(T x)
	{
		Item* item = new Item(x);
		if (last != nullptr)
			last->next = item;
		last = item;
		if (first == nullptr)
			first = last;
	}

	void print()
	{
		for (Item* t = first; t != nullptr; t = t->next)
			cout << t->inf << " ";
		cout << endl;
	}

	void doubleX(T x)
	{
		for (Item* t = first; t != nullptr; t = t->next)
		{
			if (t->inf == x)
			{
				Item* newItem = new Item(x, t->next);
				t->next = newItem;
				t = t->next;
			}
		}
	}

	void coutt(int x) {
		for (int i = first; i!=nullprt; i = i->next)
			if (i->inf == x)
			{
				cout << i->inf << " ";
				i = i->next;
			}
			else
				cout << i->inf << " ";
	}

	void remove(int x) {//удаление всех элементов перед первым встречным заданным
		for (int i = first; i != nullprt; i = i->next)
			if (i->inf == x)
			{
				for (int k = 0; k < i; ++k) {
					Item* neww;
					--size;
						neww = head;
						head = head->next;
			}
				i == nullprt;
	}
	}
};
