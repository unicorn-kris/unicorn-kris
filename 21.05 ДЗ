1) 2)
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
 
class Point 
{
    public:
    int x;
    int y;
    
    
    Point(){};
    static bool Srav(Point &p1, Point &p2)
    {
        return sqrt(p1.x * p1.x + p1.y * p1.y) > sqrt(p2.x * p2.x + p2.y * p2.y);
    }
    
        /*friend bool operator> (Point p1 , Point p2)
    {
        return sqrt(p1.x * p1.x + p1.y * p1.y) > sqrt(p2.x * p2.x + p2.y * p2.y);
    }
    friend bool operator< (Point p1 , Point p2)
    {
        return sqrt(p1.x * p1.x + p1.y * p1.y) < sqrt(p2.x * p2.x + p2.y * p2.y);
    }*/
    
};
 
int main()
{
    vector<Point> P;
    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        Point elem;
        int x, y;
        cin >> x >> y;
        elem.x = x;
        elem.y = y;
        P.push_back(elem);
        
    }
    sort(P.begin(), P.end(), Point::Srav);
    for (int i = 0; i < n; i++)
    {
        Point p1 = P[i];
        cout << p1.x << ' ' << p1.y << endl;
    }
 
    return 0;
}

3)

#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;
 
int main()
{
    int n;
    cin >> n;
    queue<int> q;
    stack<int> st;
    vector<int> v;
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        if (x % 3 == 0)
        {
            q.push(x);
        }
        else
            if (x % 3 == 1) st.push(x);
            else v.push_back(x);
    }
    while (!q.empty())
    {
        int x = q.front();
        cout << x << ' ';
        q.pop();
    }
    while (!st.empty())
    {
        int x = st.top();
        cout << x << ' ';
        st.pop();
    }
    for (int i = 0; i < v.size() / 2; i++)
    {
        cout << v[i] << ' ' << v[v.size() - i-1] << ' ';
    }
    return 0;
}
